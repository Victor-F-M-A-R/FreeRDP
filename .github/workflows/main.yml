name: RDP + n8n (persistente)

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *"   # roda de 6 em 6 horas para renovar sessão

concurrency:
  group: rdp-n8n-persistente
  cancel-in-progress: true

jobs:
  secure-rdp-and-n8n:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      # ---------- Tailscale state (ARTIFACT) ----------
      - name: Restore Tailscale state (artifact)
        uses: actions/download-artifact@v4
        with:
          name: tailscale-state
          path: C:\
        continue-on-error: true   # primeira vez não existe, tudo bem

      - name: Ensure state file exists
        shell: pwsh
        run: |
          if (-not (Test-Path 'C:\tailscale.state')) {
            New-Item -ItemType File -Path 'C:\tailscale.state' | Out-Null
          }

      # ---------- RDP / Firewall ----------
      - name: Configure Core RDP Settings
        shell: pwsh
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
          netsh advfirewall firewall delete rule name="RDP-Tailscale" | Out-Null
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389 | Out-Null
          Restart-Service -Name TermService -Force

      - name: Create/Update local RDP user
        shell: pwsh
        run: |
          Add-Type -AssemblyName System.Security
          $Upper   = [char[]](65..90)
          $Lower   = [char[]](97..122)
          $Number  = [char[]](48..57)
          $Special = ([char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126))
          $raw = @()
          $raw += $Upper   | Get-Random -Count 4
          $raw += $Lower   | Get-Random -Count 4
          $raw += $Number  | Get-Random -Count 4
          $raw += $Special | Get-Random -Count 4
          $pwd = -join ($raw | Sort-Object { Get-Random })
          $sec = ConvertTo-SecureString $pwd -AsPlainText -Force

          if (-not (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name "RDP" -Password $sec -AccountNeverExpires
          } else {
            Set-LocalUser -Name "RDP" -Password $sec
          }
          Add-LocalGroupMember -Group "Administrators" -Member "RDP" -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP" -ErrorAction SilentlyContinue

          "RDP_CREDS=User: RDP | Password: $pwd" | Out-File -FilePath $env:GITHUB_ENV -Append

      # ---------- Tailscale ----------
      - name: Install Tailscale (MSI)
        shell: pwsh
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Tailscale up (reuse state)
        shell: pwsh
        env:
          TS_AUTH: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          $ts = "$env:ProgramFiles\Tailscale\tailscale.exe"
          & $ts up `
            --authkey="$env:TS_AUTH" `
            --state="C:\tailscale.state" `
            --hostname="n8n-server" `
            --accept-dns=true `
            --accept-routes=true

      - name: Debug Tailscale / capture IP
        id: tsip
        shell: pwsh
        run: |
          $ts = "$env:ProgramFiles\Tailscale\tailscale.exe"
          & $ts status
          $ip4 = & $ts ip -4
          "TAILSCALE_IP=$ip4" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "IP: $ip4"

      # ---------- n8n sem Docker (Node) ----------
      - name: Prepare n8n folder & firewall
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path "C:\n8n" -ErrorAction SilentlyContinue | Out-Null
          New-Item -ItemType Directory -Path "C:\n8n\data" -ErrorAction SilentlyContinue | Out-Null
          netsh advfirewall firewall delete rule name="n8n-5678" | Out-Null
          netsh advfirewall firewall add rule name="n8n-5678" dir=in action=allow protocol=TCP localport=5678 | Out-Null

      - name: Create .env for n8n
        shell: pwsh
        run: |
          $lines = @(
            'N8N_BASIC_AUTH_ACTIVE=true',
            'N8N_BASIC_AUTH_USER=n8nadmin',
            'N8N_BASIC_AUTH_PASSWORD=HyIkL9hC0fQtFzN91',
            'N8N_ENCRYPTION_KEY=7e5ba0b2d6a24c4483c891079f5004f4ac6b0e83678648a6b3ed11f3f6abcb56',
            'GENERIC_TIMEZONE=America/Sao_Paulo',
            # Ajuste o domínio abaixo se o seu tailnet for diferente:
            'WEBHOOK_URL=http://n8n-server.tail255505.ts.net:5678',
            'DB_TYPE=postgresdb',
            'DB_POSTGRESDB_HOST=ep-bold-rain-ad0gbdv3-pooler.c-2.us-east-1.aws.neon.tech',
            'DB_POSTGRESDB_PORT=5432',
            'DB_POSTGRESDB_DATABASE=neondb',
            'DB_POSTGRESDB_USER=neondb_owner',
            'DB_POSTGRESDB_PASSWORD=npg_7sq8cUgWAmwh',
            'DB_POSTGRESDB_SSL_ENABLED=true',
            'DB_POSTGRESDB_SSL_REJECT_UNAUTHORIZED=false',
            'N8N_HOST=0.0.0.0',
            'N8N_PORT=5678',
            'N8N_EDITOR_BASE_URL=http://n8n-server.tail255505.ts.net:5678',
            'N8N_PROTOCOL=http'
          )
          Set-Content -Path 'C:\n8n\.env' -Value $lines -Encoding UTF8
          Write-Host 'C:\n8n\.env criado.'

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install n8n globally
        shell: pwsh
        run: |
          npm install -g n8n

      - name: Start n8n (background)
        shell: pwsh
        run: |
          $envFile = "C:\n8n\.env"
          if (-not (Test-Path $envFile)) { throw "Arquivo .env não encontrado." }
          (Get-Content $envFile) | ForEach-Object {
            if ($_ -match '^\s*$' -or $_ -match '^\s*#') { return }
            $kv = $_.Split('=',2)
            if ($kv.Length -eq 2) { Set-Item -Path "Env:$($kv[0])" -Value $kv[1] }
          }

          # Caminho do n8n.cmd (npm global bin no Windows)
          $n8nCmd = Join-Path $env:APPDATA 'npm\n8n.cmd'
          if (-not (Test-Path $n8nCmd)) {
            $npmBin = (npm bin -g)
            $n8nCmd = Join-Path $npmBin 'n8n.cmd'
          }
          if (-not (Test-Path $n8nCmd)) {
            Write-Host "Conteúdo de $env:APPDATA\npm:"
            Get-ChildItem (Join-Path $env:APPDATA 'npm') -ErrorAction SilentlyContinue | Select-Object Name,Length
            throw "n8n.cmd não encontrado no PATH global do npm."
          }

          Start-Process -NoNewWindow -FilePath $n8nCmd -ArgumentList "start" -WorkingDirectory "C:\n8n"

      # ---------- Keep alive ----------
      - name: Keep alive (~6h)
        shell: pwsh
        run: |
          Write-Host "`n=== ACCESS INFO ==="
          Write-Host "RDP  : $env:TAILSCALE_IP:3389 (User: RDP | $env:RDP_CREDS)"
          Write-Host "n8n  : http://n8n-server.tail255505.ts.net:5678"
          Write-Host "=====================`n"
          for ($i=0; $i -lt 72; $i++) {
            Write-Host "[$(Get-Date)] Runner ativo. n8n em 5678. Tailscale $env:TAILSCALE_IP"
            Start-Sleep -Seconds 300
          }

      # ---------- Persist Tailscale state ----------
      - name: Upload Tailscale state (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tailscale-state
          path: C:\tailscale.state
          if-no-files-found: warn
          retention-days: 90
