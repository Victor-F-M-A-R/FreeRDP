name: RDP + n8n (Windows + Tailscale)

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *"   # opcional: auto-rodar a cada 6h

concurrency:
  group: rdp-n8n-persistente
  cancel-in-progress: true

jobs:
  secure-rdp-and-n8n:
    runs-on: windows-latest
    timeout-minutes: 360   # 6h é o limite do runner hosted

    steps:
      # 1) RDP básico + firewall porta 3389
      - name: Configure Core RDP Settings
        shell: pwsh
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
          netsh advfirewall firewall delete rule name="RDP-Tailscale" | Out-Null
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389 | Out-Null
          Restart-Service -Name TermService -Force

      # 2) Criar/atualizar usuário RDP com senha forte
      - name: Create/Update RDP user
        shell: pwsh
        run: |
          Add-Type -AssemblyName System.Security
          $Upper   = [char[]](65..90)
          $Lower   = [char[]](97..122)
          $Number  = [char[]](48..57)
          $Special = ([char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126))
          $raw = @()
          $raw += $Upper | Get-Random -Count 4
          $raw += $Lower | Get-Random -Count 4
          $raw += $Number| Get-Random -Count 4
          $raw += $Special| Get-Random -Count 4
          $pwd = -join ($raw | Sort-Object { Get-Random })
          Write-Output "::add-mask::$pwd"
          $sec = ConvertTo-SecureString $pwd -AsPlainText -Force
          if (-not (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name "RDP" -Password $sec -AccountNeverExpires
          } else {
            Set-LocalUser -Name "RDP" -Password $sec
          }
          Add-LocalGroupMember -Group "Administrators" -Member "RDP" -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP" -ErrorAction SilentlyContinue
          "RDP_USER=RDP" | Out-File -FilePath $env:GITHUB_ENV -Append
          "RDP_PASS=$pwd" | Out-File -FilePath $env:GITHUB_ENV -Append
          "RDP_CREDS=User: RDP | Password: $pwd" | Out-File -FilePath $env:GITHUB_ENV -Append

      # 3) Sanity check (secret + rede)
      - name: Sanity check (secrets & rede)
        shell: pwsh
        env:
          TS_AUTH: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          $ErrorActionPreference = "Stop"
          if (-not $env:TS_AUTH) {
            throw "Falta o secret TAILSCALE_AUTH_KEY. Vá em Settings → Secrets and variables → Actions e crie/cole sua tskey-… (reutilizável, não-ephemeral)."
          }
          try {
            [System.Net.Dns]::GetHostAddresses("pkgs.tailscale.com") | Out-Null
            Write-Host "DNS OK para pkgs.tailscale.com"
          } catch {
            throw "DNS falhou: $($_.Exception.Message)"
          }

      # 4) Instalar Tailscale (MSI)
      - name: Install Tailscale
        shell: pwsh
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      # 5) Subir Tailscale (sem --state no Windows) + capturar IP
      - name: Tailscale up (Windows, unattended + reset + retries)
        shell: pwsh
        env:
          TS_AUTH: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          $ErrorActionPreference = "Stop"
          $ts = "$env:ProgramFiles\Tailscale\tailscale.exe"
          if (-not (Test-Path $ts)) { throw "tailscale.exe não encontrado em: $ts" }

          # Garante serviço rodando
          try {
            $svc = Get-Service -Name Tailscale -ErrorAction Stop
            if ($svc.Status -ne 'Running') {
              Start-Service -Name Tailscale
              Start-Sleep -Seconds 3
            }
          } catch {
            sc.exe start Tailscale | Out-Null
            Start-Sleep -Seconds 3
          }

          function Try-Up {
            param([int]$Attempt)
            Write-Host ">>> tailscale up (tentativa $Attempt)..."
            & $ts up `
              --auth-key="$env:TS_AUTH" `
              --hostname="n8n-server" `
              --accept-dns=true `
              --accept-routes=true `
              --unattended=true `
              --reset=true 2>&1 | Tee-Object -FilePath C:\tailscale_up.log
            return $LASTEXITCODE
          }

          $exit = Try-Up -Attempt 1
          if ($exit -ne 0) {
            Write-Host "tailscale up falhou (1). Reiniciando serviço..."
            try { Restart-Service -Name Tailscale -Force -ErrorAction SilentlyContinue } catch {}
            Start-Sleep -Seconds 5
            $exit = Try-Up -Attempt 2
          }
          if ($exit -ne 0) {
            Write-Host "tailscale up falhou (2). Logout e última tentativa..."
            & $ts logout || $true
            Start-Sleep -Seconds 3
            try { Start-Service -Name Tailscale -ErrorAction SilentlyContinue } catch {}
            Start-Sleep -Seconds 3
            $exit = Try-Up -Attempt 3
          }
          if ($exit -ne 0) {
            Write-Host "===== LOG tailscale_up.log (últimas 200 linhas) ====="
            Get-Content C:\tailscale_up.log -ErrorAction SilentlyContinue | Select-Object -Last 200
            Write-Host "===== tailscale status ====="
            & $ts status || $true
            throw "tailscale up falhou após 3 tentativas."
          }

          $tsIP = & $ts ip -4
          if (-not $tsIP) {
            Write-Host "===== tailscale status ====="
            & $ts status || $true
            throw "Tailscale IP não retornou após 'up' bem-sucedido."
          }
          "TAILSCALE_IP=$tsIP" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "Tailscale IP v4 => $tsIP"
      - name: Write RDP creds to file
        shell: pwsh
        run: |
          $addr = "$env:TAILSCALE_IP:3389"
          $lines = @(
            "Address: $addr",
            "User: $env:RDP_USER",
            "Password: $env:RDP_PASS"
          )
          Set-Content -Path rdp.txt -Value $lines -Encoding UTF8

      - name: Upload RDP creds (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: rdp-credentials
          path: rdp.txt

      # 6) Pastas do n8n + liberar porta 5678
      - name: Prepare n8n folder + firewall by port
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path "C:\n8n" -ErrorAction SilentlyContinue | Out-Null
          New-Item -ItemType Directory -Path "C:\n8n\data" -ErrorAction SilentlyContinue | Out-Null
          netsh advfirewall firewall delete rule name="n8n-5678" | Out-Null
          netsh advfirewall firewall add rule name="n8n-5678" dir=in action=allow protocol=TCP localport=5678 | Out-Null

      # 7) .env do n8n
      - name: Create .env for n8n
        shell: pwsh
        run: |
          $lines = @(
            'N8N_BASIC_AUTH_ACTIVE=true',
            'N8N_BASIC_AUTH_USER=n8nadmin',
            'N8N_BASIC_AUTH_PASSWORD=HyIkL9hC0fQtFzN91',
            'N8N_ENCRYPTION_KEY=7e5ba0b2d6a24c4483c891079f5004f4ac6b0e83678648a6b3ed11f3f6abcb56',
            'GENERIC_TIMEZONE=America/Sao_Paulo',
            'WEBHOOK_URL=http://n8n-server.tail255505.ts.net:5678',
            'N8N_PORT=5678',
            'N8N_HOST=0.0.0.0',
            'N8N_PROTOCOL=http',
            'N8N_USER_FOLDER=C:\n8n',
            'N8N_DIAGNOSTICS_ENABLED=false',
            'DB_TYPE=postgresdb',
            'DB_POSTGRESDB_HOST=ep-bold-rain-ad0gbdv3-pooler.c-2.us-east-1.aws.neon.tech',
            'DB_POSTGRESDB_PORT=5432',
            'DB_POSTGRESDB_DATABASE=neondb',
            'DB_POSTGRESDB_USER=neondb_owner',
            'DB_POSTGRESDB_PASSWORD=npg_7sq8cUgWAmwh',
            'DB_POSTGRESDB_SSL_ENABLED=true',
            'DB_POSTGRESDB_SSL_REJECT_UNAUTHORIZED=false'
          )
          Set-Content -Path 'C:\n8n\.env' -Value $lines -Encoding UTF8
          Write-Host 'C:\n8n\.env criado.'

      # 8) Node 20 + n8n global
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install n8n globally
        shell: pwsh
        run: npm install -g n8n

      # 9) Liberar o processo node.exe no firewall
      - name: Allow node.exe in Windows Firewall
        shell: pwsh
        run: |
          $node = (Get-Command node).Source
          Write-Host "node.exe em: $node"
          netsh advfirewall firewall delete rule name="Allow node.exe" | Out-Null
          netsh advfirewall firewall add rule name="Allow node.exe" dir=in action=allow program="$node" enable=yes | Out-Null

      # 10) Subir n8n com pm2 + health-check + netstat
      - name: Start n8n with pm2 (background + healthcheck)
        shell: pwsh
        run: |
          Get-Content -Raw "C:\n8n\.env" | ForEach-Object {
            if ($_ -match '^\s*#') { return }
            if ($_ -match '^\s*$') { return }
            $kv = $_.Split('=',2)
            if ($kv.Length -eq 2) { Set-Item -Path "Env:$($kv[0])" -Value $kv[1] }
          }
          npm i -g pm2 --location=global
          pm2 kill | Out-Null
          $n8nCmd = (Get-Command n8n.cmd -ErrorAction Stop).Source
          Write-Host "n8n.cmd em: $n8nCmd"
          pm2 start "$n8nCmd" --name n8n -- start
          pm2 save | Out-Null
          Start-Sleep -Seconds 6
          $ok1 = Test-NetConnection -ComputerName 127.0.0.1 -Port 5678
          Write-Host "Local 127.0.0.1:5678 => TCP: $($ok1.TcpTestSucceeded)"
          try {
            $resp = Invoke-WebRequest -UseBasicParsing -Uri "http://127.0.0.1:5678/healthz" -TimeoutSec 5
            Write-Host "GET /healthz => $($resp.StatusCode)"
          } catch { Write-Host "GET /healthz falhou: $($_.Exception.Message)" }
          if ($env:TAILSCALE_IP) {
            $ok2 = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 5678
            Write-Host "$env:TAILSCALE_IP:5678 => TCP: $($ok2.TcpTestSucceeded)"
          }
          Write-Host "== LISTENING (5678) =="
          netstat -ano | findstr ":5678" | findstr "LISTEN"

      # 11) Manter vivo até o limite (prints a cada 5 min)
      - name: Keep alive (~6h)
        shell: pwsh
        run: |
          Write-Host "`n=== ACCESS INFO ==="
          Write-Host "RDP  -> $env:TAILSCALE_IP:3389  (User: $env:RDP_USER | Password: $env:RDP_PASS)"
          Write-Host "n8n  -> http://n8n-server.tail255505.ts.net:5678  (ou http://$env:TAILSCALE_IP:5678)"
          Write-Host "=====================`n"
          for ($i=0; $i -lt 72; $i++) {
            Write-Host "[$(Get-Date)] Runner ativo. n8n em 5678. Tailscale $env:TAILSCALE_IP"
            Start-Sleep -Seconds 300
          }
