name: RDP + n8n (Tailscale IP fixo)

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *"   # roda a cada 6h para renovar/reativar se precisar

concurrency:
  group: rdp-n8n-persistente
  cancel-in-progress: true

jobs:
  secure-rdp-and-n8n:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      # ------------ Tailscale: restaurar estado ------------
      # No Windows o state fica no AppData local do runner + ProgramData.
      - name: Restore Tailscale state (cache)
        uses: actions/cache/restore@v4
        with:
          path: |
            C:\Users\runneradmin\AppData\Local\Tailscale
            C:\ProgramData\Tailscale
          key: tailscale-state-v1

      # ------------ RDP ------------
      - name: Configure Core RDP Settings
        shell: pwsh
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
          netsh advfirewall firewall delete rule name="RDP-Tailscale" | Out-Null
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389 | Out-Null
          Restart-Service -Name TermService -Force

      - name: Create/Update RDP user
        shell: pwsh
        run: |
          Add-Type -AssemblyName System.Security
          $Upper   = [char[]](65..90)
          $Lower   = [char[]](97..122)
          $Number  = [char[]](48..57)
          $Special = ([char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126))
          $raw = @()
          $raw += $Upper   | Get-Random -Count 4
          $raw += $Lower   | Get-Random -Count 4
          $raw += $Number  | Get-Random -Count 4
          $raw += $Special | Get-Random -Count 4
          $pwd = -join ($raw | Sort-Object { Get-Random })
          $sec = ConvertTo-SecureString $pwd -AsPlainText -Force
          if (-not (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name "RDP" -Password $sec -AccountNeverExpires
          } else {
            Set-LocalUser -Name "RDP" -Password $sec
          }
          Add-LocalGroupMember -Group "Administrators" -Member "RDP" -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP" -ErrorAction SilentlyContinue
          "RDP_CREDS=User: RDP | Password: $pwd" | Out-File -FilePath $env:GITHUB_ENV -Append

      # ------------ Tailscale ------------
      - name: Install Tailscale
        shell: pwsh
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        shell: pwsh
        env:
          TS_AUTH: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          $ts = "$env:ProgramFiles\Tailscale\tailscale.exe"

          # Observação: no Windows o cliente salva o estado em AppData/ProgramData.
          # Usar um auth key REUTILIZÁVEL (não-ephemeral) com o MESMO hostname
          # faz o nó reaparecer e manter o mesmo IP.
          & $ts up `
            --authkey="$env:TS_AUTH" `
            --hostname="n8n-server" `
            --accept-dns=true `
            --accept-routes=true

          $tsIP = & $ts ip -4
          "TAILSCALE_IP=$tsIP" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "Tailscale IP: $tsIP"

      - name: Save Tailscale state (cache)
        uses: actions/cache/save@v4
        with:
          path: |
            C:\Users\runneradmin\AppData\Local\Tailscale
            C:\ProgramData\Tailscale
          key: tailscale-state-v1

      # ------------ n8n ------------
      - name: Prepare n8n folder + firewall
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path "C:\n8n" -ErrorAction SilentlyContinue | Out-Null
          New-Item -ItemType Directory -Path "C:\n8n\data" -ErrorAction SilentlyContinue | Out-Null
          netsh advfirewall firewall delete rule name="n8n-5678" | Out-Null
          netsh advfirewall firewall add rule name="n8n-5678" dir=in action=allow protocol=TCP localport=5678 | Out-Null

      - name: Create .env for n8n
        shell: pwsh
        run: |
          $lines = @(
            'N8N_BASIC_AUTH_ACTIVE=true',
            'N8N_BASIC_AUTH_USER=n8nadmin',
            'N8N_BASIC_AUTH_PASSWORD=HyIkL9hC0fQtFzN91',
            'N8N_ENCRYPTION_KEY=7e5ba0b2d6a24c4483c891079f5004f4ac6b0e83678648a6b3ed11f3f6abcb56',
            'GENERIC_TIMEZONE=America/Sao_Paulo',
            'WEBHOOK_URL=http://n8n-server.tail255505.ts.net:5678',
            'DB_TYPE=postgresdb',
            'DB_POSTGRESDB_HOST=ep-bold-rain-ad0gbdv3-pooler.c-2.us-east-1.aws.neon.tech',
            'DB_POSTGRESDB_PORT=5432',
            'DB_POSTGRESDB_DATABASE=neondb',
            'DB_POSTGRESDB_USER=neondb_owner',
            'DB_POSTGRESDB_PASSWORD=npg_7sq8cUgWAmwh',
            'DB_POSTGRESDB_SSL_ENABLED=true',
            'DB_POSTGRESDB_SSL_REJECT_UNAUTHORIZED=false'
          )
          Set-Content -Path 'C:\n8n\.env' -Value $lines -Encoding UTF8
          Write-Host 'C:\n8n\.env criado.'

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install n8n globally
        shell: pwsh
        run: npm install -g n8n

      - name: Start n8n (background)
        shell: pwsh
        run: |
          # Exporta variáveis do .env para o processo do n8n
          Get-Content "C:\n8n\.env" | ForEach-Object {
            if ($_ -and ($_ -notmatch '^\s*#')) {
              $k,$v = $_.Split('=',2)
              if ($k -and $v) { [Environment]::SetEnvironmentVariable($k, $v) }
            }
          }
          $npmBin = (npm bin -g)
          Start-Process -NoNewWindow -FilePath "$npmBin\n8n.cmd" -ArgumentList "start" -WorkingDirectory "C:\n8n"

      - name: Keep alive (~6h)
        shell: pwsh
        run: |
          Write-Host "`n=== ACCESS INFO ==="
          Write-Host "RDP  -> $env:TAILSCALE_IP:3389 (User: RDP | $env:RDP_CREDS)"
          Write-Host "n8n  -> http://n8n-server.tail255505.ts.net:5678"
          Write-Host "=====================`n"
          for ($i=0; $i -lt 72; $i++) {
            Write-Host "[$(Get-Date)] Runner ativo. n8n em 5678. Tailscale $env:TAILSCALE_IP"
            Start-Sleep -Seconds 300
          }
