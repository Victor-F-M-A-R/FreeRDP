name: RDP

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */5 * * *"   # roda a cada 5 horas

concurrency:
  group: rdp-persistente
  cancel-in-progress: true

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
                           -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
                           -Name "SecurityLayer" -Value 0 -Force
          netsh advfirewall firewall delete rule name="RDP-Tailscale" >NUL 2>&1
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: Create RDP User with Secure Password
        run: |
          Add-Type -AssemblyName System.Security
          $charSet = @{
            Upper   = [char[]](65..90)
            Lower   = [char[]](97..122)
            Number  = [char[]](48..57)
            Special = ([char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126))
          }
          $raw = @()
          $raw += $charSet.Upper   | Get-Random -Count 4
          $raw += $charSet.Lower   | Get-Random -Count 4
          $raw += $charSet.Number  | Get-Random -Count 4
          $raw += $charSet.Special | Get-Random -Count 4
          $password  = -join ($raw | Sort-Object { Get-Random })
          $secure    = ConvertTo-SecureString $password -AsPlainText -Force
          if (-not (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name "RDP" -Password $secure -AccountNeverExpires
            Add-LocalGroupMember -Group "Administrators" -Member "RDP"
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          }
          echo "RDP_CREDS=User: RDP | Password: $password" >> $env:GITHUB_ENV

      # 1) RESTAURA o cache onde guardamos o Registro do Tailscale
      - name: Restore Tailscale state (cache)
        uses: actions/cache/restore@v4
        with:
          path: C:\tsstate
          key: tailscale-state-win-v1

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      # 2) IMPORTA o Registro salvo (se existir) antes do 'tailscale up'
      - name: Import Tailscale machine state (Registry)
        shell: pwsh
        run: |
          if (Test-Path C:\tsstate\ts.reg) {
            reg import C:\tsstate\ts.reg
            Write-Host "Tailscale machine state imported from cache."
          } else {
            Write-Host "No cached Tailscale state yet (first run)."
          }

      - name: Establish Tailscale Connection (fixed hostname)
        run: |
          $ts = "$env:ProgramFiles\Tailscale\tailscale.exe"
          & $ts up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} `
                   --hostname=n8n-server `
                   --accept-routes --accept-dns
          # aguarda IP
          $tsIP = $null; $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
            $tsIP = & $ts ip -4
            Start-Sleep -Seconds 5
            $retries++
          }
          if (-not $tsIP) { Write-Error "Tailscale IP not assigned."; exit 1 }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          Write-Host "Tailscale IPv4: $tsIP"

      - name: Verify RDP Accessibility
        run: |
          Write-Host "Tailscale IP: $env:TAILSCALE_IP"
          $ok = (Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389).TcpTestSucceeded
          if (-not $ok) { Write-Error "TCP connection to 3389 failed"; exit 1 }
          Write-Host "TCP connectivity successful!"

      # 3) EXPORTA o Registro e SALVA no cache para a próxima execução
      - name: Export Tailscale machine state (Registry)
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path C:\tsstate | Out-Null
          reg export "HKLM\SOFTWARE\Tailscale IPN" C:\tsstate\ts.reg /y
          Write-Host "Tailscale machine state exported to C:\tsstate\ts.reg"

      - name: Save Tailscale state (cache)
        uses: actions/cache/save@v4
        with:
          path: C:\tsstate
          key: tailscale-state-win-v1

      # Mantém a sessão até o próximo cron (24/7)
      - name: Maintain Connection (~5h15)
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address:  $env:TAILSCALE_IP"
          Write-Host "Username: RDP"
          Write-Host "Password: $(echo $env:RDP_CREDS)"
          Write-Host "==================`n"
          Write-Host "Mantendo a sessão ativa por ~5 horas e 15 minutos..."
          Start-Sleep -Seconds $((5*3600 + 15*60))
          Write-Host "Encerrando a sessão para reinicialização automática via cron."
